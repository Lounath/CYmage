#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define DATA_OFFSET_OFFSET 0x000A
#define WIDTH_OFFSET 0x0012
#define HEIGHT_OFFSET 0x0016
#define BITS_PER_PIXEL_OFFSET 0x001C
#define HEADER_SIZE 14
#define INFO_HEADER_SIZE 40
#define NO_COMPRESION 0
#define MAX_NUMBER_OF_COLORS 0
#define ALL_COLORS_REQUIRED 0

typedef unsigned int int32;
typedef short int16;
typedef unsigned char byte;

//***Inputs*****
//fileName: The name of the file to open 
//***Outputs****
//pixels: A pointer to a byte array. This will contain the pixel data
//width: An int pointer to store the width of the image in pixels
//height: An int pointer to store the height of the image in pixels
//bytesPerPixel: An int pointer to store the number of bytes per pixel that are used in the image
void ReadImage(const char *fileName,byte **pixels, int32 *width, int32 *height, int32 *bytesPerPixel)
{
        //Open the file for reading in binary mode
        FILE *imageFile = fopen(fileName, "rb");
        //Read data offset
        int32 dataOffset;
        fseek(imageFile, DATA_OFFSET_OFFSET, SEEK_SET);
        fread(&dataOffset, 4, 1, imageFile);
        //Read width
        fseek(imageFile, WIDTH_OFFSET, SEEK_SET);
        fread(width, 4, 1, imageFile);
        //Read height
        fseek(imageFile, HEIGHT_OFFSET, SEEK_SET);
        fread(height, 4, 1, imageFile);
        //Read bits per pixel
        int16 bitsPerPixel;
        fseek(imageFile, BITS_PER_PIXEL_OFFSET, SEEK_SET);
        fread(&bitsPerPixel, 2, 1, imageFile);
        //Allocate a pixel array
        *bytesPerPixel = ((int32)bitsPerPixel) / 8;

        //Rows are stored bottom-up
        //Each row is padded to be a multiple of 4 bytes. 
        //We calculate the padded row size in bytes
        int paddedRowSize = (int)(4 * ceil((float)(*width) / 4.0f))*(*bytesPerPixel);
        //We are not interested in the padded bytes, so we allocate memory just for
        //the pixel data
        int unpaddedRowSize = (*width)*(*bytesPerPixel);
        //Total size of the pixel data in bytes
        int totalSize = unpaddedRowSize*(*height);
        *pixels = (byte*)malloc(totalSize);
        //Read the pixel data Row by Row.
        //Data is padded and stored bottom-up
        int i = 0;
        //point to the last row of our pixel array (unpadded)
        byte *currentRowPointer = *pixels+((*height-1)*unpaddedRowSize);
        for (i = 0; i < *height; i++)
        {
                //put file cursor in the next row from top to bottom
	        fseek(imageFile, dataOffset+(i*paddedRowSize), SEEK_SET);
	        //read only unpaddedRowSize bytes (we can ignore the padding bytes)
	        fread(currentRowPointer, 1, unpaddedRowSize, imageFile);
	        //point to the next row (from bottom to top)
	        currentRowPointer -= unpaddedRowSize;
        }

        fclose(imageFile);
}

void fillHeaderVal( int val,int placeHigh, unsigned char* header) {
   
    header[placeHigh] = ((val & 0xFF000000) >> (6*4));
    header[placeHigh - 1] = ((val & 0x00FF0000) >> (4*4));
    header[placeHigh - 2] = ((val & 0x0000FF00) >> (2*4));
    header[placeHigh - 3] = (val & 0x000000FF);

}
//***Inputs*****
//fileName: The name of the file to save 
//pixels: Pointer to the pixel data array
//width: The width of the image in pixels
//height: The height of the image in pixels
//bytesPerPixel: The number of bytes per pixel that are used in the image
FILE* WriteImage(const char *fileName, byte *pixels, int32 width, int32 height,int32 bytesPerPixel)
{
	    // BMP images have a 54 byte header
    unsigned char header[54] = { 
        0x42, 0x4D, // "BM"
        0, 0, 0, 0, // image size with header
        0x00, 0x00,
        0x00, 0x00,
        0x36, 0x00, 0x00, 0x00,
        0x28, 0x00, 0x00, 0x00,
        0, 0, 0, 0, // width
        0, 0, 0, 0, // height
        0x01, 0x00,
        0x18, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0, 0, 0, 0, // image size excluding header

        0xC4, 0x0E, 0x00, 0x00,
        0xC4, 0x0E, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00
    };
    int bitmapSize = 3 * width * height;
    int fileSize = bitmapSize + 54;
    fillHeaderVal(fileSize, 5, header);
//    printf("%X \n", fileSize );
//    printf("%X %X %X %X \n", header[2], header[3], header[4], header[5]);
    fillHeaderVal(width, 21, header);
    fillHeaderVal(height, 25, header);
    fillHeaderVal(bitmapSize, 37, header);

    // Add padding so that each line width in bytes is multiple of 4 even if the pixel width is not
    //    - 3 colors, R, G, B, so lines take 3*width bytes
    //    - the line width in bytes % 4 gives us the distance from the last multiple of 4
    //    - then subtract this from 4 to get the distance to the next multiple of 4 and therefore the padding
    int padding =(4 -  ((3 * width)  % 4)); 
    if(padding == 4) {  // do not add padding if line width in bytes is already multiple of 4
        padding = 0;
    }


    FILE *fp;
    fp = fopen(fileName, "wb"); // write in binary mode 

    // write the header out to the file
    for(int i = 0; i < 54; i++) {
        fputc(header[i], fp);
//        printf("%X ", header[i] );

    }
    return fp;
}
void cent80(const char *fileName, byte *pixels, int32 width, int32 height,int32 bytesPerPixel){
	FILE* fp= WriteImage(fileName, pixels, width, height, bytesPerPixel);
        int i = 0;
        int paddedRowSize = (int)(4 * ceil((float)width/4.0f))*bytesPerPixel;
        int unpaddedRowSize = width*bytesPerPixel;
        for ( i = height; i > 0; i--)
        {
                //start writing from the beginning of last row in the pixel array
                int pixelOffset = ((height - i))*unpaddedRowSize;
                fwrite(&pixels[pixelOffset], 1, paddedRowSize, fp);
        }
        fclose(fp);
}





void copy(const char *fileName, byte *pixels, int32 width, int32 height,int32 bytesPerPixel)
{
	FILE* fp= WriteImage(fileName, pixels, width, height, bytesPerPixel);
        int i = 0;
        int paddedRowSize = (int)(4 * ceil((float)width/4.0f))*bytesPerPixel;
        int unpaddedRowSize = width*bytesPerPixel;
        for ( i = 0; i < height; i++)
        {
                //start writing from the beginning of last row in the pixel array
                int pixelOffset = ((height - i) - 1)*unpaddedRowSize;
                fwrite(&pixels[pixelOffset], 1, paddedRowSize, fp);
        }
        fclose(fp);
}

int main()
{
        byte *pixels;
        int32 width;
        int32 height;
        int32 bytesPerPixel;
        ReadImage("imaget.bmp", &pixels, &width, &height,&bytesPerPixel);
        copy("img.bmp", pixels, width, height, bytesPerPixel);
        cent80("img2.bmp", pixels, width, height, bytesPerPixel);
        free(pixels);
        return 0;
}




